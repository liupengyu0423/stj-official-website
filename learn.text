1、bootstrap的栅格式用法：col-lg-6 col-md-6 col-sm-12 col-xs-12  大(col-lg-)、中(col-md-)屏幕是等分两份；小(col-sm-)、特小(类似手机col-xs-)占满    
   横向页面总共分为12份

2、px2rem的用法：此方法可以响应式大小，直接根据设计稿写px，然后自动转换为rem
      (1) 安装插件  
          npm install px2rem-loader --save-dev
          npm install lib-flexible --save-dev
      (2) 在build文件夹下的utils.js文件中的cssLoaders函数中中设置：
          const px2remLoader = {
            loader: 'px2rem-loader',
            options: {
              'remUnit': 144    //设计稿的宽度/10  若设计稿为750，则为75
            }
          }

          在generateLoaders函数中引入px2remLoader：
          const loaders = options.usePostCSS ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]

      (3) 在node_modules中的lib-flexible文件夹中flexible.js中作修改：
          将
          if (width / dpr > 540) {
            width = 540 * dpr; //此处写死了
          }
          改为
          if (width / dpr > 540) {
            width = width * dpr;//当屏幕宽度超过540的时候我们应该以实际宽度重新计算,从而来做到适应PC
          }
      (4) 在main.js中引入
          import 'lib-flexible'
      (5) 此时设计稿量出来的大小就是写在页面的大小，例如设计稿height:60px,就写height:60px，px2rem会自动转换为rem

3、图片作为背景图的用法：即使图片小，也能平铺随着缩放;不要用img标签，会拉伸变形
  (1)设置元素的宽高width:100%;height:200px;
  (2)设置background: url('../../images/about.png') no-repeat center center;
        background-size: auto 100%;

4、让元素选中而不是选中包裹此元素的div
   pointer-events: auto / none(元素永远不会成为鼠标事件的target) / ...;

5、vw:视窗宽度的百分比（1vw 代表视窗的宽度为 1%）  vh:视窗高度的百分比  vmin:当前 vw 和 vh 中较小的一个值  vmax:当前 vw 和 vh 中较大的一个值
  vw、vh、vmin、vmax 是一种视窗单位，也是相对单位。它相对的不是父节点或者页面的根节点。而是由视窗（Viewport）大小来决定的，单位 1，代表类似于 1%。
视窗(Viewport)是你的浏览器实际显示内容的区域—，换句话说是你的不包括工具栏和按钮的网页浏览器。
  做移动页面开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。
由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。

6、vue单页面通过prerender-spa-plugin插件进行SEO优化
    对于单页面应用，只有一个html文件，是所有页面的载体，vue通过js控制路由然后渲染出对应的页面，而搜索引擎🕷蜘蛛️是不会去执行页面js的，导致搜索引擎🕷️只能收录index.html一个页面，在百度中就搜索不到相关的子页面的内容，
    这会引起两个问题：
      (1) 收录的页面少了，点击量之类的也少了
      (2) 不能对对应的页面做TDK(title、keywords、description)不同的配置，这个可以配合vue-meta-info插件生成  用时安装npm install vue-meta-info
    那么想要解决这个问题，html文档就不能通过js生成，目前了解到的有两种办法：vue的ssr渲染和prerender-spa-plugin插件实现。
    (1) npm install prerender-spa-plugin
    (2) 在webpack.prod.conf.js中引入
        const PrerenderSpaPlugin = require('prerender-spa-plugin')   //首先得安装prerender-spa-plugin
        const Renderer = PrerenderSpaPlugin.PuppeteerRenderer
        
        在plugins中使用插件：
        new PrerenderSpaPlugin({
          staticDir: path.join(__dirname, '../dist'),
          routes: ['/index', '/product', '/expression', '/news', '/newsDetail', '/leader', '/leaderDetail', '/washroom', '/about', '/net'],
          renderer: new PrerenderSpaPlugin.PuppeteerRenderer({//这样写renderAfterTime生效了
            renderAfterTime: 5000
          })
        })

    (2) 在main.js中作如下修改
        new Vue({
          el: '#app',
          router,
          components: { App },
          template: '<App/>',
          /* 这句非常重要，否则预渲染将不会启动 */
          mounted () {
            document.dispatchEvent(new Event('render-event'))
          }
        })
    
    (3) 使用vue-meta-info
        在main.js中引入
        import MetaInfo from 'vue-meta-info'
        Vue.use(MetaInfo)

        在 xxx.vue 文件里写上以下代码。这些代码会转换成网页的 meta 标签里的内容。
        export default {
          metaInfo: {
            title: '我是一个title',
            meta: [
              {
                name: 'keywords',
                content: '关键字1,关键字2,关键字3'
              },
              {
                name: 'description',
                content: '这是一段网页的描述'
              }
            ]
          }
        }

  链接：https://blog.csdn.net/yftk765768540/article/details/81047145


7、阿里服务器：可以上线代码
  登录地址：https://signin.aliyun.com/1392346931748744.onaliyun.com/login.htm
  用户名：yangmengyan@1392346931748744.onaliyun.com
  密码：bn)3ny%tEzDnZ0OsO40xE6G75)8LUKs{

  登录后打开https://oss.console.aliyun.com/overview，左侧选择stj-fe-wx，文件管理中上传FE全部资源，用http://wx.chinastj.com/即可访问。
